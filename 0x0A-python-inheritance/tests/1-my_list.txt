Test cases for 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Intialisation
=============

``MyList`` can be instantiated with no arguments, which will return
an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or a single argument, which must be an iterable object.

::

    >>> my_list = MyList([2, 3, 4])
    >>> print(my_list)
    [2, 3, 4]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable


A ``TypeError`` will be raised for any more than one instantiation arguments.

::

    >>> my_list = MyList([3, 6], [2, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Valid cases
===========

    >>> my_list = MyList()
    >>> my_list.append(2)
    >>> my_list.append(4)
    >>> my_list.append(6)
    >>> print(my_list)
    [2, 4, 6]

Replaced an index position:

::

    >>> my_list[1] = 9
    >>> print(my_list)
    [2, 9, 6]

And removing an item.

::

    >>> my_list.remove(9)
    >>> print(my_list)
    [2, 6]


Sorted prints
=============

Implementing a print_sorted(self)

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

Taking an argument will realease a TypeError.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

List is printed in ascending order.

::

    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list.append(7)
    >>> my_list.append(9)
    >>> my_list.append(4)
    >>> print(my_list)
    [3, 5, 7, 9, 4]

::

    >>> my_list.print_sorted()
    [3, 4, 5, 7, 9]

The order of the original list is not altered after a call to the method.

::

    >>> print(my_list)
    [3, 5, 7, 9, 4]

Note that lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Sharon")
    >>> my_list.append("Eden")
    >>> my_list.append("Python")
    >>> my_list.append("ALX")
    >>> my_list.append("inherits")
    >>> print(my_list)
    ['Sharon', 'Eden', 'Python', 'ALX', 'inherits']

::

    >>> my_list.print_sorted()
    ['ALX', 'Eden', 'inherits', 'Python', 'Sharon']

Another friendly reminder that the original list is unaltered

::

    >>> print(my_list)
    ['Sharon', 'Eden', 'Python', 'ALX', 'inherits']

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([3, "Eden", "ALX", 9])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
