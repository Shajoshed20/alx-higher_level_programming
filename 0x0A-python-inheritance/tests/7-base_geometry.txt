Test Case for 7-base_geometry.py
=============================

This modules defines a base geometry class BaseGeometry.

Intialisation
=============

``BaseGeometry`` includes no attributes, and accordingly is initialized 
with no arguments.

::

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

::

    >>> print(bg) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>


::

    >>> bg = BaseGeometry(None)
    Traceback (most recent call last):
    TypeError: object() takes no parameters

Test Cases
===========

`Two methods are used - ``area(self)`` and 
``integer_validator(self, name, value)``.

::

    >>> bg = BaseGeometry()
    >>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry 
     object at...>>

::

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

::

    >>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry 
    object at...>>

Errors
=======

When ``value`` is a valid integer, the function does nothing.

::


   >>> bg.integer_validator("valid number", 1)

When, if ``value`` is not an integer, a ``TypeError`` is raised.

::

    >>> bg.integer_validator("non valid", "number")
    Traceback (most recent call last):
    TypeError: non valid must be an integer

::

    >>> bg.integer_validator("condition", True)
    Traceback (most recent call last):
    TypeError: condition must be an integer

::

    >>> bg.integer_validator("invalid tuple", (1,))
    Traceback (most recent call last):
    TypeError: invalid tuple must be an integer

::

    >>> bg.integer_validator("and another", [3])
    Traceback (most recent call last):
    TypeError: and another must be an integer

::

    >>> bg.integer_validator("more invalid testing", {3, 4})
    Traceback (most recent call last):
    TypeError: more invalid testing must be an integer

::

    >>> bg.integer_validator("absolutely every possible invalid", None)
    Traceback (most recent call last):
    TypeError: absolutely every possible invalid must be an integer


::

    >>> bg.integer_validator("invalid int", -1)
    Traceback (most recent call last):
    ValueError: invalid int must be greater than 0

::

    >>> bg.integer_validator("invalid int", 0)
    Traceback (most recent call last):
    ValueError: invalid int must be greater than 0

Both ``name`` and ``value`` must be provided.

::

    >>> bg.integer_validator() # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 
    'name' and 'value'

::

    >>> bg.integer_validator(None) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 
    'value'

The method thinks the paramter ``name`` will be string, but ``name`` of any
type will be printed.

::

    >>> bg.integer_validator({"e": 4}, (8, 9))
    Traceback (most recent call last):
    TypeError: {'e': 4} must be an integer
