Test case for 0-add_integer.py
===========================

This module takes two integers or floats as arguments and returns their sum

Usage
=====

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

Importing the function to at the beginning
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(10, -4)
    6

For floating numbers
    >>> add_integer(2.5)
    100

For two positive floats
    >>> add_integer(2.0, 3.0)
    5

::

    >>> add_integer(2.9, 0.2)
    2

For two negetive floating values

    >>> add_integer(-10.5, -2)
    -12


Non-Numbers
===========

Adding an integer number and a string (a = 5 and b = "ALX")
    >>> add_integer(5, "ALX")
    Traceback (most recent call last):
    TypeError: b must be an integer

Adding a letter and a number (a = 'x' and b = 4)
    >>> add_integer('x', 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

Adding two letters (a = 'Python' and b = 'isFun')
    >>> add_integer('Python', 'isFun')
    Traceback (most recent call last):
    TypeError: a must be an integer

Adding a tuple
    >>> add_integer((2.5, None))
    Traceback (most recent call last):
    TypeError: b must be an integer

Passing no argument to the function
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

For infinity value:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Test with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
